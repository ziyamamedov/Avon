"use strict";

var token = "4fc049db594406eeb07d7bd5b94cddf43351e828";
var $country = $('#country');
var $region = $('#region');
var $city = $('#city');
var $street = $('#street');
$country.suggestions({
  token: token,
  type: "ADDRESS",
  count: 10,
  constraints: {
    locations: {
      country: "*"
    }
  },
  bounds: "country",
  hint: false,

  /* Вызывается, когда пользователь выбирает одну из подсказок */
  onSelect: function onSelect(suggestion) {
    console.log(suggestion);
  }
});
$region.suggestions({
  token: token,
  type: "ADDRESS",
  bounds: "region-area",
  constraints: $country,

  /* Вызывается, когда пользователь выбирает одну из подсказок */
  onSelect: function onSelect(suggestion) {
    console.log(suggestion);
  }
});
$city.suggestions({
  token: token,
  type: "ADDRESS",
  hint: false,
  bounds: "city-settlement",
  constraints: $region,

  /* Вызывается, когда пользователь выбирает одну из подсказок */
  onSelect: function onSelect(suggestion) {
    console.log(suggestion);
  }
});
$street.suggestions({
  token: token,
  type: "ADDRESS",
  hint: false,
  bounds: "street-house",
  constraints: $city,

  /* Вызывается, когда пользователь выбирает одну из подсказок */
  onSelect: function onSelect(suggestion) {
    console.log(suggestion);
  }
});
var swiper = new Swiper('.swiper-container', {
  // Optional parameters
  slidesPerView: 1,
  spaceBetween: 10,
  loop: true,
  // If we need pagination
  pagination: {
    el: '.swiper-pagination',
    clickable: true
  },
  breakpoints: {
    // when window width is >= 480px
    480: {
      slidesPerView: 2,
      spaceBetween: 20
    },
    // when window width is >= 640px
    640: {
      slidesPerView: 3,
      spaceBetween: 30
    }
  }
});
$('#prevbtn').on("click", function () {
  swiper.slidePrev();
});
$('#nextBtn').on("click", function () {
  swiper.slideNext();
});
document.addEventListener('DOMContentLoaded', function () {
  var cataloguesList = document.querySelector('.catalogues__list');
  cataloguesList.innerHTML = '';
  $.ajax({
    type: 'GET',
    url: "./php/cat-list-load.php",
    dataType: 'json',
    success: function success(data) {
      console.log(data);
    }
  });
});
var sliderList = $('#catalogueSliderList');
sliderList.html = '';
/*XHr request which tells us how many images are there in the
  catalogue folder, which we need to build our slider */

$('#cat-btn').on('click', function (e) {
  e.preventDefault();
  $.ajax({
    type: 'GET',
    url: "./php/catalogue-load.php",
    dataType: 'text',
    success: function success(data) {
      var imgCount = Number(data); // Quantity of images in the folder

      var pageCount = imgCount - 2; //Quantiy of pages in the catalogue(2 are blank pages)

      var inputPageSelector = document.querySelector('.catalogue__slider-diplay-input'); // Дисплей отобр-я текущей страницы

      var catalogueSwiper = new Swiper('.swiper-container_cat', {
        speed: 800,
        keyboard: {
          enabled: true
        },
        virtual: {
          slides: function () {
            var slides = [];

            for (var i = 0; i < imgCount; i++) {
              slides.push("<div class=\"catalogues__slider-item-col\"><img class=\"catalogue__slider-item-img\" src=\"./images/catalogue/01_2021/".concat(i, ".jpg\" alt=\"\u041A\u0430\u0442\u0430\u043B\u043E\u0433 3 2021\"></div>\n                            <div class=\"catalogues__slider-item-col\"><img class=\"catalogue__slider-item-img\" src=\"./images/catalogue/01_2021/").concat(i + 1, ".jpg\" alt=\"\u041A\u0430\u0442\u0430\u043B\u043E\u0433 3 2021\"></div>"));
              i++;
            }

            return slides;
          }()
        },
        on: {
          slideChange: function slideChange() {
            changeDisplay(catalogueSwiper.activeIndex * 2, pageCount);
          }
        }
      });

      function changeDisplay(currentPage, totalPages) {
        if (currentPage == 0) {
          inputPageSelector.value = "1 / ".concat(totalPages);
        } else if (currentPage >= totalPages) {
          inputPageSelector.value = "".concat(totalPages, " / ").concat(totalPages);
        } else {
          inputPageSelector.value = "".concat(currentPage, " - ").concat(currentPage + 1, " / ").concat(totalPages);
        }
      }

      ;
      changeDisplay(0, pageCount);
      $('.catalogues__slider-prev-btn').on('click', function (e) {
        e.preventDefault();
        catalogueSwiper.slidePrev();
      });
      $('.catalogues__slider-next-btn').on('click', function (e) {
        e.preventDefault();
        catalogueSwiper.slideNext();
      });
      $('.catalogues__slider-first-btn').on('click', function (e) {
        e.preventDefault();
        catalogueSwiper.slideTo(0, 0);
      });
      $('.catalogue__slider-last-btn').on('click', function (e) {
        e.preventDefault();
        catalogueSwiper.slideTo(imgCount / 2 - 1, 0);
      }); // Функционал выбора и отображения текущей страницы

      inputPageSelector.addEventListener('focus', function () {
        this.value = '';
      });
      inputPageSelector.addEventListener('keydown', function (e) {
        if (e.keyCode > 47 && e.keyCode < 57 || e.keyCode == 8) {// Default behavior
        } else if (e.keyCode == 13) {
          //Enter pressed
          var chosenSlide = catalogueSwiper.activeIndex * 2;

          if (this.value == '') {
            this.blur();
            changeDisplay(chosenSlide, pageCount);
          } else {
            chosenSlide = Number(this.value);
            catalogueSwiper.slideTo(chosenSlide / 2, 800);
            this.blur();
          }
        } else {
          e.preventDefault();
        }
      });
      inputPageSelector.addEventListener('blur', function () {
        if (this.value == '') {
          changeDisplay(catalogueSwiper.activeIndex * 2, pageCount);
        }
      });
    }
  });
});
var hamBtn = document.querySelector('#hamBtn');
var sidebar = document.querySelector('.sidebar');
var clsBtn = document.querySelector('#hamClsBtn');
hamBtn.addEventListener('click', function () {
  sidebar.classList.add('sidebar--active');
});
clsBtn.addEventListener('click', function () {
  sidebar.classList.remove('sidebar--active');
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
